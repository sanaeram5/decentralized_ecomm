{"ast":null,"code":"/*global module:true*/\n'use strict';\n\nMath.log2 = Math.log2 || function (x) {\n  return Math.log(x) / Math.LN2;\n};\n\nMath.log10 = Math.log10 || function (x) {\n  return Math.log(x) / Math.LN10;\n};\n\n(function () {\n  var Helpers = {\n    avg: function (arr) {\n      var v = 0;\n\n      for (var index = 0; index < arr.length; ++index) {\n        v += arr[index];\n      }\n\n      return v / arr.length;\n    },\n    min: function (arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0];\n\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 < v) v = v2;\n      }\n\n      return Math.max(0, v);\n    },\n    max: function (arr) {\n      var v = 0;\n\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 > v) v = v2;\n      }\n\n      return Math.max(0, v);\n    },\n    upperMax: function (arr) {\n      var v = 0;\n\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.max(v2);\n        if (v2 > v) v = v2;\n      }\n\n      return Math.max(0, v);\n    },\n    lowerMin: function (arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0] || Infinity;\n      if (Array.isArray(v)) v = Helpers.lowerMin(v);\n\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (v2 == null) continue;\n        if (Array.isArray(v2)) v2 = Helpers.lowerMin(v2);\n        if (v2 < v) v = v2;\n      }\n\n      if (isNaN(v) || !isFinite(v)) v = 0;\n      return Math.max(0, v);\n    },\n    niceNumbers: function (range, round) {\n      var exponent = Math.floor(Math.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n\n      if (round) {\n        if (fraction < 1.5) niceFraction = 1;else if (fraction < 3) niceFraction = 2;else if (fraction < 7) niceFraction = 5;else niceFraction = 10;\n      } else {\n        if (fraction <= 1.0) niceFraction = 1;else if (fraction <= 2) niceFraction = 2;else if (fraction <= 5) niceFraction = 5;else niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n    },\n    getLinearTicks: function (min, max, maxTicks) {\n      var range = Helpers.niceNumbers(max - min, false);\n      var tickSpacing = Helpers.niceNumbers(range / (maxTicks - 1), true);\n      return [Math.floor(min / tickSpacing) * tickSpacing, Math.ceil(max / tickSpacing) * tickSpacing, tickSpacing];\n    },\n    getFont: function (options) {\n      options.style = options.style || 'normal';\n      options.variant = options.variant || 'normal';\n      options.weight = options.weight || 'lighter';\n      options.size = options.size || '12';\n      options.family = options.family || 'Arial';\n      return [options.style, options.variant, options.weight, options.size + 'px', options.family].join(' ');\n    },\n    getAxisRatio: function (min, max, value) {\n      return (value - min) / (max - min);\n    }\n  };\n\n  var BarChart = function () {\n    function BarChart(ctx, options) {\n      this.mouseListeners = [];\n      this.currentHint = null;\n      this.fillRegions = [];\n      this.options = {\n        font: 'Helvetica',\n        fontWeight: 'normal',\n        fontSizeTitle: 24,\n        fontSizeAxes: 20,\n        fontSizeTicks: 18,\n        fontSizeLabels: 18,\n        fontDataTags: 18,\n        fontSizeLegend: 18,\n        fontSizeHint: 18,\n        paddingPercentBars: 0.10,\n        paddingPercentTicks: 0.15,\n        paddingPixelsVertical: 10,\n        paddingPixelsHorizontal: 10,\n        paddingPixelsTicks: 10,\n        maxWidthBars: 0,\n        fillColorBackground: 'rgb(255, 255, 255)',\n        strokeColorBars: 'rgb(0, 0, 0)',\n        fillColorBars: 'rgba(180, 180, 180, 0.25)',\n        scaleStyle: 'linear',\n        barStyle: 'none',\n        stackedBarPadding: 3,\n        defaultMaxTick: 0,\n        pixelsLegendSquare: 10,\n        radiusDot: 5,\n        fillColorLegend: 'rgb(230, 230, 230)',\n        tickFormatter: null,\n        tickFormatterMeasure: null,\n        fillRegion: 'normal'\n      };\n      options = options || {};\n\n      for (var key in this.options) {\n        if (options.hasOwnProperty(key)) this.options[key] = options[key];\n      }\n\n      this.ctx = ctx;\n      this.content = {};\n      this.labelPositions = {};\n    }\n\n    BarChart.prototype.update = function (content) {\n      if (typeof content !== 'object') {\n        throw new Error('Collections must be objects.');\n      } else if (!(content.hasOwnProperty('labels') && content.hasOwnProperty('data'))) {\n        throw new Error('Collection must specify labels and data.');\n      } else if (!(Array.isArray(content.labels) && Array.isArray(content.data))) {\n        throw new Error('Labels and data must be arrays.');\n      } else if (content.labels.length !== content.data.length) {\n        throw new Error('Labels and data length must match.');\n      }\n\n      content._data_standard_deviation = [];\n      content._data_standard_error = [];\n\n      for (var i = 0; i < content.data.length; ++i) {\n        var isArr = Array.isArray(content.data[i]);\n\n        if (this.options.scaleStyle === 'log2') {\n          if (isArr) {\n            for (var i3 = 0; i3 < content.data[i].length; ++i3) content.data[i][i3] = Math.log2(content.data[i][i3]);\n          } else content.data[i] = Math.log2(content.data[i]);\n        }\n\n        if (isArr) {\n          var mean = Helpers.avg(content.data[i]);\n          var acc = 0;\n\n          for (var i2 = 0; i2 < content.data[i].length; ++i2) acc += Math.pow(mean - content.data[i][i2], 2);\n\n          acc = Math.sqrt(acc / (content.data[i].length - 1));\n\n          content._data_standard_deviation.push(acc);\n\n          content._data_standard_error.push(acc / Math.sqrt(content.data[i].length));\n        } else {\n          content._data_standard_deviation.push(0);\n\n          content._data_standard_error.push(0);\n        }\n      }\n\n      this.content = content;\n      this.redraw();\n    };\n\n    BarChart.prototype.redraw = function () {\n      setTimeout(function () {\n        this._draw();\n      }.bind(this), 0);\n    };\n\n    BarChart.prototype.mousemove = function (x, y) {\n      var res = null;\n\n      for (var index = 0; index < this.mouseListeners.length; ++index) {\n        if (res = this.mouseListeners[index](x, y)) break;\n      }\n\n      if (!res || typeof res !== 'object' || !res.hasOwnProperty('index') || !res.hasOwnProperty('drawIndex')) {\n        if (this.currentHint !== null) {\n          this.currentHint = null;\n          this.redraw();\n        }\n\n        return;\n      }\n\n      var ch = this.currentHint;\n\n      if (ch == null || ch.index != res.index || ch.drawIndex != res.drawIndex) {\n        this.currentHint = res;\n        this.redraw();\n      }\n    };\n\n    BarChart.prototype._draw = function () {\n      var labelPositions = {};\n      this.mouseListeners = [];\n      this.fillRegions = [];\n      var options = this.options;\n      var ctx = this.ctx,\n          content = this.content;\n      var width = ctx.canvas.width,\n          height = ctx.canvas.height;\n      ctx.clearRect(0, 0, width, height);\n      ctx.translate(-0.5, -0.5);\n      var remainingWidth = width,\n          remainingHeight = height;\n      var index;\n\n      if (options.fillColorBackground != null) {\n        ctx.save();\n        ctx.fillStyle = options.fillColorBackground;\n        ctx.fillRect(0, 0, width, height);\n        ctx.restore();\n      }\n\n      var topYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      /* Draw title of bar chart */\n\n      if (content.title != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeTitle,\n          family: options.font\n        });\n        ctx.textAlign = 'center';\n        ctx.fillText(content.title, width / 2, topYPadding + options.fontSizeTitle);\n        ctx.restore();\n        remainingHeight -= options.fontSizeTitle * 1.25;\n        topYPadding += options.fontSizeTitle * 1.25;\n      }\n      /* Compute required left padding */\n\n\n      var leftXPadding = options.paddingPixelsVertical;\n      remainingWidth -= options.paddingPixelsVertical;\n      var leftXDrawYLabel = null;\n\n      if (content.yAxis != null) {\n        leftXDrawYLabel = leftXPadding + options.fontSizeAxes * 0.5;\n        remainingWidth -= options.fontSizeAxes * 1.25;\n        leftXPadding += options.fontSizeAxes * 1.25;\n      }\n\n      ctx.save();\n      ctx.font = Helpers.getFont({\n        weight: options.fontWeight,\n        size: options.fontSizeTicks,\n        family: options.font\n      });\n      var maxChartValue, minChartValue;\n\n      if (options.barStyle === 'stacked') {\n        maxChartValue = 0;\n        minChartValue = Infinity;\n\n        for (var cmIndex = 0; cmIndex < content.data.length; ++cmIndex) {\n          var doB;\n\n          if (Array.isArray(doB = content.data[cmIndex])) {\n            var tempSum = 0;\n\n            for (var ii2 = 0; ii2 < doB.length; ++ii2) tempSum += doB[ii2];\n\n            maxChartValue = Math.max(maxChartValue, tempSum);\n            minChartValue = Math.min(minChartValue, tempSum);\n          } else {\n            maxChartValue = Math.max(maxChartValue, content.data[cmIndex]);\n            minChartValue = Math.min(minChartValue, content.data[cmIndex]);\n          }\n        }\n      } else {\n        maxChartValue = Helpers.upperMax(content.data);\n        minChartValue = Helpers.lowerMin(content.data);\n      }\n\n      if (options.scaleStyle.indexOf('adaptive') === 0) {\n        if (options.scaleStyle.indexOf(':') !== -1) {\n          var floater = parseFloat(options.scaleStyle.split(/[:]/)[1]);\n          minChartValue *= floater;\n          maxChartValue *= 1 + (1 - floater) / 2.0;\n        }\n      } else minChartValue = 0;\n\n      if (options.defaultMaxTick > maxChartValue) maxChartValue = options.defaultMaxTick;\n\n      if (content.bars != null && Array.isArray(content.bars)) {\n        for (index = 0; index < content.bars.length; ++index) {\n          var cbv = content.bars[index].value;\n          if (isNaN(cbv)) continue;\n          maxChartValue = Math.max(maxChartValue, cbv);\n          minChartValue = Math.min(minChartValue, cbv);\n        }\n      }\n\n      var maxYAxisTickWidth = options.scaleStyle == 'log2' ? Math.ceil(Math.pow(2, maxChartValue)) : Math.ceil(maxChartValue) + '.00';\n      if (options.tickFormatterMeasure != null) maxYAxisTickWidth = options.tickFormatterMeasure;\n      maxYAxisTickWidth = ctx.measureText(maxYAxisTickWidth).width;\n      maxYAxisTickWidth = Math.ceil(maxYAxisTickWidth) + options.paddingPixelsTicks;\n      remainingWidth -= maxYAxisTickWidth;\n      leftXPadding += maxYAxisTickWidth;\n      ctx.restore();\n      var rightXPadding = options.paddingPixelsVertical;\n      remainingWidth -= options.paddingPixelsVertical;\n      /* Draw legend */\n\n      if (content.legend != null && Array.isArray(content.legend)) {\n        ctx.save();\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeLegend,\n          family: options.font\n        });\n        var maxLWidth = 0;\n\n        for (var lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          maxLWidth = Math.max(maxLWidth, ctx.measureText(content.legend[lIndex].label).width);\n        }\n\n        maxLWidth = Math.ceil(maxLWidth);\n        maxLWidth += options.pixelsLegendSquare + 8;\n        var legendEntriesPerLine = Math.floor((remainingWidth - options.paddingPixelsHorizontal * 2) / maxLWidth);\n        var lLReqHeight = Math.ceil(content.legend.length / legendEntriesPerLine) * options.fontSizeLegend * 1.5;\n        remainingHeight -= lLReqHeight;\n        bottomYPadding += lLReqHeight;\n        ctx.strokeStyle = 'rgb(0, 0, 0)';\n        ctx.fillStyle = options.fillColorLegend;\n        var bSX, bSY;\n        ctx.beginPath();\n        ctx.moveTo(bSX = leftXPadding, bSY = topYPadding + remainingHeight);\n        ctx.lineTo(bSX + remainingWidth, bSY);\n        ctx.lineTo(bSX + remainingWidth, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY);\n        ctx.stroke();\n        ctx.fill();\n\n        for (lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          var legLine = Math.floor(lIndex / legendEntriesPerLine);\n          var legCol = lIndex % legendEntriesPerLine;\n          ctx.fillStyle = content.legend[lIndex].color;\n          var boxX = bSX + legCol * maxLWidth + 3,\n              boxY = bSY + legLine * options.fontSizeLegend * 1.5 + options.fontSizeLegend * 0.5;\n          ctx.beginPath();\n          ctx.moveTo(boxX, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY);\n          ctx.fill();\n          ctx.stroke();\n          ctx.textAlign = 'left';\n          ctx.fillStyle = 'rgb(0, 0, 0)';\n          ctx.fillText(content.legend[lIndex].label, boxX + 3 + options.pixelsLegendSquare, boxY + options.fontSizeLegend * 0.5);\n        }\n\n        ctx.restore();\n      }\n      /* Draw x-axis label of bar chart */\n\n\n      var bottomYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n\n      if (content.xAxis != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeAxes,\n          family: options.font\n        });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.xAxis, width - remainingWidth + remainingWidth / 2, topYPadding + remainingHeight - bottomYPadding);\n        remainingHeight -= options.fontSizeAxes * 1.5;\n        bottomYPadding += options.fontSizeAxes * 1.5;\n        ctx.restore();\n      }\n\n      var widthPerBar = remainingWidth / content.data.length;\n      /* Draw x-axis top labels */\n\n      if (content.topLabels != null) {\n        ctx.save();\n        ctx.textAlign = 'center';\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeLabels,\n          family: options.font\n        });\n        remainingHeight -= options.fontSizeLabels * 1.5;\n        topYPadding += options.fontSizeLabels * 1.5;\n\n        for (index = 0; index < content.topLabels.length; ++index) {\n          ctx.fillText(content.topLabels[index], leftXPadding + index * widthPerBar + widthPerBar / 2, topYPadding - options.fontSizeLabels / 2);\n        }\n\n        ctx.restore();\n      }\n      /* Draw x-axis labels */\n\n\n      ctx.save();\n      var reqWidth = 0;\n\n      if (content.dataTags != null) {\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontDataTags,\n          family: options.font\n        });\n        var dataTags = content.dataTags;\n\n        for (index = 0; index < dataTags.length; ++index) {\n          if (Array.isArray(dataTags[index])) {\n            for (var index2 = 0; index2 < dataTags[index].length; ++index2) {\n              reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index][index2]).width + 5));\n            }\n          } else {\n            reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index]).width + 5));\n          }\n        }\n      }\n\n      ctx.font = Helpers.getFont({\n        weight: options.fontWeight,\n        size: options.fontSizeLabels,\n        family: options.font\n      });\n      var computedBarPadding = Math.floor(widthPerBar * options.paddingPercentBars / 2);\n      var wwh = widthPerBar - computedBarPadding * 2;\n\n      if (wwh < reqWidth) {\n        computedBarPadding -= Math.ceil((reqWidth - wwh) / 2);\n        computedBarPadding = Math.max(0, computedBarPadding);\n      } else if (options.maxWidthBars > 0 && wwh > options.maxWidthBars) {\n        computedBarPadding = Math.floor((widthPerBar - options.maxWidthBars) / 2);\n      }\n\n      var maxTextWidth = 0,\n          maxTextStackSize = 1;\n\n      for (index = 0; index < content.labels.length; ++index) {\n        var tLabel = content.labels[index];\n\n        if (Array.isArray(tLabel)) {\n          maxTextStackSize = Math.max(maxTextStackSize, tLabel.length);\n\n          for (index2 = 0; index2 < tLabel.length; ++index2) {\n            maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel[index2]).width);\n          }\n        } else maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel).width);\n      }\n\n      var xLabelsRotated = false;\n\n      if (maxTextWidth > widthPerBar - computedBarPadding) {\n        ctx.textAlign = 'right';\n        ctx.rotate(Math.PI * 1.5);\n        xLabelsRotated = true;\n      } else {\n        ctx.textAlign = 'center';\n      }\n\n      var lastLabelY = -options.fontSizeLabels;\n\n      for (index = 0; index < content.labels.length; ++index) {\n        var cLabel = content.labels[index];\n        var x = leftXPadding + index * widthPerBar + widthPerBar / 2,\n            y = topYPadding + remainingHeight - options.fontSizeLabels / 2;\n\n        if (xLabelsRotated) {\n          y = topYPadding + remainingHeight - maxTextWidth + 5;\n          y = [x, x = -y][0];\n          if (y < lastLabelY + options.fontSizeLabels) continue;\n          lastLabelY = y;\n        }\n\n        var yUp = options.fontSizeLabels * (maxTextStackSize - 1);\n\n        if (Array.isArray(cLabel)) {\n          if (xLabelsRotated) {\n            yUp = options.fontSizeLabels * (cLabel.length - 1.5);\n            yUp /= 2;\n          }\n\n          for (index2 = 0; index2 < cLabel.length; ++index2) {\n            ctx.fillText(cLabel[index2], x, y - yUp);\n            yUp -= options.fontSizeLabels;\n          }\n        } else {\n          if (xLabelsRotated) yUp = -options.fontSizeLabels * 0.25;\n          ctx.fillText(cLabel, x, y - yUp);\n        }\n      }\n\n      if (xLabelsRotated) {\n        remainingHeight -= maxTextWidth + 5;\n        bottomYPadding += maxTextWidth + 5;\n      } else {\n        var remVal = options.fontSizeLabels * maxTextStackSize;\n        remVal += options.fontSizeLabels * 0.5;\n        remainingHeight -= remVal;\n        bottomYPadding += remVal;\n      }\n\n      ctx.restore();\n      /* Draw boundaries */\n\n      var boundX1 = leftXPadding,\n          boundX2 = leftXPadding + remainingWidth;\n      var boundY1 = topYPadding,\n          boundY2 = topYPadding + remainingHeight;\n\n      for (index = 0; index < content.labels.length; ++index) labelPositions[index] = {\n        xStart: leftXPadding + index * widthPerBar,\n        xEnd: leftXPadding + (1 + index) * widthPerBar,\n        yStart: boundY1,\n        yEnd: boundY2\n      };\n\n      ctx.save();\n      ctx.strokeStyle = 'rgb(0, 0, 0)';\n      ctx.beginPath();\n\n      if (content.topLabels != null) {\n        ctx.moveTo(boundX2, boundY1);\n        ctx.lineTo(boundX1, boundY1);\n      } else {\n        ctx.moveTo(boundX1, boundY1);\n      }\n\n      ctx.lineTo(boundX1, boundY2);\n      ctx.lineTo(boundX2, boundY2);\n      if (content.topLabels != null) ctx.lineTo(leftXPadding + remainingWidth, topYPadding);\n      ctx.stroke();\n      ctx.restore();\n      /* Draw top label */\n\n      if (content.topLabel != null) {\n        ctx.save();\n        ctx.textAlign = 'right';\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeLabels,\n          family: options.font\n        });\n        ctx.fillText(content.topLabel, leftXPadding - 3, topYPadding - options.fontSizeLabels / 2);\n        ctx.restore();\n      }\n      /* Draw y-axis label of bar chart */\n\n\n      if (content.yAxis != null) {\n        ctx.save();\n        ctx.rotate(Math.PI * 1.5);\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeAxes,\n          family: options.font\n        });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.yAxis, -(topYPadding + remainingHeight / 2), leftXDrawYLabel);\n        ctx.restore();\n      }\n      /* Draw y-axis labels */\n\n\n      ctx.save();\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.20)';\n      ctx.font = Helpers.getFont({\n        weight: options.fontWeight,\n        size: options.fontSizeTicks,\n        family: options.font\n      });\n      ctx.textAlign = 'right';\n      var tickMeta = Helpers.getLinearTicks(0, maxChartValue, Math.max(2, remainingHeight / (options.fontSizeTicks * (1 + options.paddingPercentTicks))));\n      var alpha = maxChartValue / options.fontSizeTicks;\n      maxChartValue = tickMeta[1];\n      if (maxChartValue > 1) maxChartValue += Math.ceil(alpha);else maxChartValue += alpha;\n      var ticks = [];\n\n      while (tickMeta[0] <= tickMeta[1]) {\n        ticks.push(tickMeta[0]);\n        tickMeta[0] += tickMeta[2];\n      }\n\n      for (index = 0; index < ticks.length; ++index) {\n        var tickHeight = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, ticks[index]));\n        if (tickHeight < 0) continue;\n        if (options.scaleStyle == 'log2' && ticks[index] !== 0) ticks[index] = Math.round(Math.pow(2, ticks[index]));else ticks[index] = Math.floor(ticks[index] * 100) / 100;\n\n        if (options.tickFormatter != null && typeof options.tickFormatter === 'function') {\n          ctx.fillText(options.tickFormatter(ticks[index]).toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        } else {\n          ctx.fillText(ticks[index].toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        }\n\n        if (index == 0) continue;\n        ctx.beginPath();\n        ctx.moveTo(leftXPadding, topYPadding + remainingHeight - tickHeight);\n        ctx.lineTo(leftXPadding + remainingWidth, topYPadding + remainingHeight - tickHeight);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n\n      if (content.bars != null && Array.isArray(content.bars)) {\n        ctx.save();\n\n        for (index = 0; index < content.bars.length; ++index) {\n          var cBar = content.bars[index];\n          if (cBar.value > maxChartValue) continue;\n          var renderBarY = topYPadding + remainingHeight - Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, cBar.value));\n          ctx.strokeStyle = cBar.style;\n          ctx.fillStyle = cBar.style;\n          ctx.beginPath();\n          ctx.moveTo(boundX1, renderBarY);\n          ctx.lineTo(boundX2, renderBarY);\n          ctx.stroke();\n          ctx.fill();\n        }\n\n        ctx.restore();\n      }\n      /* Draw bars */\n\n\n      ctx.save();\n      var lastData = null;\n\n      for (index = 0; index < content.data.length; ++index) {\n        var fillColorForIndex = null;\n        var strokeColorForIndex = null;\n\n        if (content.fillColor != null) {\n          if (Array.isArray(content.fillColor)) fillColorForIndex = ctx.fillStyle = content.fillColor[index];else ctx.fillStyle = content.fillColor;\n        } else ctx.fillStyle = options.fillColorBars;\n\n        if (content.strokeColor != null) {\n          if (Array.isArray(content.strokeColor)) strokeColorForIndex = ctx.strokeStyle = content.strokeColor[index];else ctx.strokeStyle = content.strokeColor;\n        } else ctx.strokeStyle = options.strokeColorBars;\n\n        var v = content.data[index];\n        var vIsArr = Array.isArray(v);\n        var renderStartX = leftXPadding + widthPerBar * index;\n\n        if (vIsArr && options.barStyle === 'stacked') {\n          var runningValue = 0,\n              lastHeight = 0;\n\n          for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n            if (fillColorForIndex != null && Array.isArray(fillColorForIndex)) {\n              ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n            }\n\n            if (strokeColorForIndex != null && Array.isArray(strokeColorForIndex)) {\n              ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n            }\n\n            runningValue += v[drawIndex];\n            var renderBarHeight = Math.floor(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, runningValue));\n            var renderUpToY = topYPadding + remainingHeight - renderBarHeight;\n\n            if (Math.abs(renderBarHeight - lastHeight) < options.stackedBarPadding + 2) {\n              lastHeight = renderBarHeight;\n              continue;\n            }\n\n            var barPadP = drawIndex > 0 ? options.stackedBarPadding : 0;\n            var tSX, tSY;\n            var tEX, tEY;\n            ctx.beginPath();\n            ctx.moveTo(tSX = renderStartX + computedBarPadding, tSY = topYPadding + remainingHeight - lastHeight - barPadP);\n            ctx.lineTo(renderStartX + computedBarPadding, renderUpToY);\n            ctx.lineTo(tEX = renderStartX + (widthPerBar - 1) - computedBarPadding, tEY = renderUpToY);\n            ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight - lastHeight - barPadP);\n            if (drawIndex > 0) ctx.lineTo(tSX, tSY);\n            ctx.stroke();\n            ctx.fill();\n            var hint;\n\n            if (content.hints != null && content.hints[index] != null && (hint = content.hints[index][drawIndex]) != null) {\n              this.mouseListeners.push(function (index, drawIndex, hint, sx, sy, ex, ey, x, y) {\n                var minX = Math.min(sx, ex),\n                    maxX = Math.max(sx, ex);\n                var minY = Math.min(sy, ey),\n                    maxY = Math.max(sy, ey);\n                if (x < minX || x > maxX || y < minY || y > maxY) return null;\n                return {\n                  index: index,\n                  drawIndex: drawIndex,\n                  rect: {\n                    left: minX,\n                    right: maxX,\n                    top: minY,\n                    bottom: maxY\n                  },\n                  text: hint.split('\\n')\n                };\n              }.bind(this, index, drawIndex, hint, tSX, tSY, tEX, tEY));\n            }\n\n            var tagText;\n\n            if (tSY - renderUpToY > options.fontDataTags * 1.25 && content.dataTags != null && (tagText = content.dataTags[index]) != null && (tagText = tagText[drawIndex]) != null) {\n              var oFS = ctx.fillStyle;\n              ctx.fillStyle = 'rgb(0, 0, 0)';\n              ctx.font = Helpers.getFont({\n                weight: options.fontWeight,\n                size: options.fontDataTags,\n                family: options.font\n              });\n              ctx.textAlign = 'center';\n              ctx.fillText(tagText, renderStartX + widthPerBar / 2, tSY - options.fontDataTags * 0.25);\n              ctx.fillStyle = oFS;\n            }\n\n            lastHeight = renderBarHeight;\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({\n              weight: options.fontWeight,\n              size: options.fontSizeLabels,\n              family: options.font\n            });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY - 3);\n          }\n        } else if (options.barStyle === 'line') {\n          if (vIsArr) {\n            var rbx = renderStartX + widthPerBar / 2;\n            var lDu;\n\n            if (options.fillRegion === 'background') {\n              lDu = lastData;\n              if (Array.isArray(lDu)) lDu = lDu[0];\n\n              if (lDu != null) {\n                var sFS = ctx.fillStyle;\n                ctx.fillStyle = lDu.color;\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1);\n                ctx.fillStyle = sFS;\n              }\n            }\n\n            var nLData = [];\n\n            for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n              var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v[drawIndex]));\n              var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n              var rby = renderUpToY3;\n\n              if (lastData != null) {\n                var tLX, tLY;\n\n                if (Array.isArray(lastData)) {\n                  tLX = (lastData[drawIndex] || {}).x;\n                  tLY = (lastData[drawIndex] || {}).y;\n                } else {\n                  tLX = lastData.x;\n                  tLY = lastData.y;\n                }\n\n                if (tLX && tLY) {\n                  if (Array.isArray(strokeColorForIndex)) {\n                    ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n                  } else ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n\n              if (Array.isArray(fillColorForIndex)) {\n                ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n              }\n\n              if (Array.isArray(strokeColorForIndex)) {\n                ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n              }\n\n              ctx.beginPath();\n              ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n              ctx.stroke();\n              ctx.fill();\n              nLData[drawIndex] = {\n                x: rbx,\n                y: rby,\n                color: ctx.fillStyle\n              };\n            }\n\n            lastData = nLData;\n            if (lDu != null && lDu.color != lastData[0].color) this.fillRegions.push({\n              x: lastData[0].x,\n              y: lastData[0].y,\n              prev: lDu.color,\n              next: lastData[0].color\n            });\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index];\n\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          } else {\n            var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n            var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n            var rbx = renderStartX + widthPerBar / 2,\n                rby = renderUpToY3;\n            var lDu;\n\n            if (options.fillRegion === 'background') {\n              if (lastData != null) {\n                lDu = lastData;\n                if (Array.isArray(lDu)) lDu = lDu[0];\n                var sFS = ctx.fillStyle;\n                ctx.fillStyle = lDu.color;\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1);\n                ctx.fillStyle = sFS;\n              }\n            }\n\n            ctx.beginPath();\n            ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n            ctx.stroke();\n            ctx.fill();\n\n            if (lastData != null) {\n              if (Array.isArray(lastData)) {\n                var tLX, tLY;\n\n                for (var key in lastData) {\n                  if (!lastData.hasOwnProperty(key)) continue;\n                  tLX = lastData[key].x;\n                  tLY = lastData[key].y;\n\n                  if (tLX && tLY) {\n                    ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                    ctx.beginPath();\n                    ctx.moveTo(tLX, tLY);\n                    ctx.lineTo(rbx, rby);\n                    ctx.stroke();\n                  }\n                }\n              } else {\n                var tLX = lastData.x,\n                    tLY = lastData.y;\n\n                if (tLX && tLY) {\n                  ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n            }\n\n            lastData = {\n              x: rbx,\n              y: rby,\n              color: ctx.fillStyle\n            };\n            if (lDu != null && lDu.color != lastData.color) this.fillRegions.push({\n              x: lastData.x,\n              y: lastData.y,\n              prev: lDu.color,\n              next: lastData.color\n            });\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index];\n\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          }\n\n          var hint;\n\n          if (content.hints != null && (hint = content.hints[index]) != null) {\n            this.mouseListeners.push(function (index, hint, sx, sy, ex, ey, x, y) {\n              var minX = Math.min(sx, ex),\n                  maxX = Math.max(sx, ex);\n              var minY = Math.min(sy, ey),\n                  maxY = Math.max(sy, ey);\n              if (x < minX || x > maxX || y < minY || y > maxY) return null;\n              return {\n                index: index,\n                drawIndex: drawIndex,\n                rect: {\n                  left: minX,\n                  right: maxX,\n                  top: minY,\n                  bottom: maxY\n                },\n                text: hint.split('\\n')\n              };\n            }.bind(this, index, hint, rbx - 1, topYPadding, rbx + 1, topYPadding + remainingHeight));\n          }\n        } else {\n          if (vIsArr) v = Helpers.avg(v);\n          var renderBarHeight2 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n          var renderUpToY2 = topYPadding + remainingHeight - renderBarHeight2;\n          ctx.beginPath();\n          ctx.moveTo(renderStartX + computedBarPadding, topYPadding + remainingHeight);\n          ctx.lineTo(renderStartX + computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight);\n          ctx.stroke();\n          ctx.fill();\n\n          if (options.barStyle === 'error') {\n            var val;\n\n            if ((val = content._data_standard_error[index]) != 0) {\n              var renderBarError = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, val));\n              ctx.beginPath();\n              var wiskerWidth = Math.round((widthPerBar - computedBarPadding * 2) / 8);\n              var x_ = leftXPadding + widthPerBar * index + widthPerBar / 2;\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.moveTo(x_, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_, renderUpToY2 - renderBarError);\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.stroke();\n            }\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({\n              weight: options.fontWeight,\n              size: options.fontSizeLabels,\n              family: options.font\n            });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY2 - 3);\n          }\n        }\n      }\n\n      ctx.restore();\n\n      if (this.currentHint != null) {\n        ctx.save();\n        var hRect = this.currentHint.rect,\n            hints = this.currentHint.text;\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeHint,\n          family: options.font\n        });\n        ctx.textAlign = 'left';\n        var boxWidth = 0;\n\n        for (index = 0; index < hints.length; ++index) {\n          boxWidth = Math.max(boxWidth, Math.ceil(ctx.measureText(hints[index]).width));\n        }\n\n        var boxWidthPadding = 5;\n        var lineHeight = options.fontSizeHint * 1.5;\n        var boxHeight = hints.length * lineHeight;\n        var drawX = hRect.right + 10,\n            drawY = (hRect.top + hRect.bottom) / 2;\n        boxWidth += boxWidthPadding * 2;\n\n        if (drawX + boxWidth > width) {\n          drawX = hRect.left - boxWidth - 10;\n        }\n\n        if (drawY - boxHeight / 2 < 0) {\n          drawY = Math.ceil(boxHeight / 2) + 1;\n        } else if (drawY + boxHeight / 2 > height) {\n          drawY = height - boxHeight / 2 - 1;\n        }\n\n        ctx.clearRect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.beginPath();\n        ctx.rect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.stroke();\n\n        for (index = 0; index < hints.length; ++index) {\n          ctx.fillText(hints[index], drawX + boxWidthPadding, drawY - boxHeight / 2 + options.fontSizeHint + index * lineHeight);\n        }\n\n        ctx.restore();\n      }\n\n      ctx.translate(0.5, 0.5);\n      this.labelPositions = labelPositions;\n    };\n\n    return BarChart;\n  }();\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = BarChart;\n  } else {\n    window.BarChart = BarChart;\n  }\n})();","map":{"version":3,"sources":["/home/sanaeram5/hackathon/seller/node_modules/chartjs/chart.js"],"names":["Math","log2","x","log","LN2","log10","LN10","Helpers","avg","arr","v","index","length","min","v2","Array","isArray","max","upperMax","lowerMin","Infinity","isNaN","isFinite","niceNumbers","range","round","exponent","floor","fraction","pow","niceFraction","getLinearTicks","maxTicks","tickSpacing","ceil","getFont","options","style","variant","weight","size","family","join","getAxisRatio","value","BarChart","ctx","mouseListeners","currentHint","fillRegions","font","fontWeight","fontSizeTitle","fontSizeAxes","fontSizeTicks","fontSizeLabels","fontDataTags","fontSizeLegend","fontSizeHint","paddingPercentBars","paddingPercentTicks","paddingPixelsVertical","paddingPixelsHorizontal","paddingPixelsTicks","maxWidthBars","fillColorBackground","strokeColorBars","fillColorBars","scaleStyle","barStyle","stackedBarPadding","defaultMaxTick","pixelsLegendSquare","radiusDot","fillColorLegend","tickFormatter","tickFormatterMeasure","fillRegion","key","hasOwnProperty","content","labelPositions","prototype","update","Error","labels","data","_data_standard_deviation","_data_standard_error","i","isArr","i3","mean","acc","i2","sqrt","push","redraw","setTimeout","_draw","bind","mousemove","y","res","ch","drawIndex","width","canvas","height","clearRect","translate","remainingWidth","remainingHeight","save","fillStyle","fillRect","restore","topYPadding","title","textAlign","fillText","leftXPadding","leftXDrawYLabel","yAxis","maxChartValue","minChartValue","cmIndex","doB","tempSum","ii2","indexOf","floater","parseFloat","split","bars","cbv","maxYAxisTickWidth","measureText","rightXPadding","legend","maxLWidth","lIndex","label","legendEntriesPerLine","lLReqHeight","bottomYPadding","strokeStyle","bSX","bSY","beginPath","moveTo","lineTo","stroke","fill","legLine","legCol","color","boxX","boxY","xAxis","widthPerBar","topLabels","reqWidth","dataTags","index2","computedBarPadding","wwh","maxTextWidth","maxTextStackSize","tLabel","xLabelsRotated","rotate","PI","lastLabelY","cLabel","yUp","remVal","boundX1","boundX2","boundY1","boundY2","xStart","xEnd","yStart","yEnd","topLabel","tickMeta","alpha","ticks","tickHeight","toString","cBar","renderBarY","lastData","fillColorForIndex","strokeColorForIndex","fillColor","strokeColor","vIsArr","renderStartX","runningValue","lastHeight","renderBarHeight","renderUpToY","abs","barPadP","tSX","tSY","tEX","tEY","hint","hints","sx","sy","ex","ey","minX","maxX","minY","maxY","rect","left","right","top","bottom","text","tagText","oFS","barTooltips","rbx","lDu","sFS","nLData","renderBarHeight3","renderUpToY3","rby","tLX","tLY","arc","prev","next","balls","ball","radius","renderBarHeight2","renderUpToY2","val","renderBarError","wiskerWidth","x_","hRect","boxWidth","boxWidthPadding","lineHeight","boxHeight","drawX","drawY","module","exports","window"],"mappings":"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","sourcesContent":["/*global module:true*/\n'use strict';\n\nMath.log2 = Math.log2 || function(x) {\n  return Math.log(x) / Math.LN2;\n};\n\nMath.log10 = Math.log10 || function(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n(function() {\n  var Helpers = {\n    avg: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        v += arr[index];\n      }\n      return v / arr.length;\n    },\n    min: function(arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0];\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 < v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    max: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    upperMax: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.max(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    lowerMin: function(arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0] || Infinity;\n      if (Array.isArray(v)) v = Helpers.lowerMin(v);\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (v2 == null) continue;\n        if (Array.isArray(v2)) v2 = Helpers.lowerMin(v2);\n        if (v2 < v) v = v2;\n      }\n      if (isNaN(v) || !isFinite(v)) v = 0;\n      return Math.max(0, v);\n    },\n    niceNumbers: function(range, round) {\n      var exponent = Math.floor(Math.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n      if (round) {\n        if (fraction < 1.5) niceFraction = 1;\n        else if (fraction < 3) niceFraction = 2;\n        else if (fraction < 7) niceFraction = 5;\n        else niceFraction = 10;\n      } else {\n        if (fraction <= 1.0) niceFraction = 1;\n        else if (fraction <= 2) niceFraction = 2;\n        else if (fraction <= 5) niceFraction = 5;\n        else niceFraction = 10;\n      }\n      return niceFraction * Math.pow(10, exponent);\n    },\n    getLinearTicks: function(min, max, maxTicks) {\n      var range = Helpers.niceNumbers(max - min, false);\n      var tickSpacing = Helpers.niceNumbers(range / (maxTicks - 1), true);\n      return [\n        Math.floor(min / tickSpacing) * tickSpacing,\n        Math.ceil(max / tickSpacing) * tickSpacing,\n        tickSpacing\n      ];\n    },\n    getFont: function(options) {\n      options.style = options.style || 'normal';\n      options.variant = options.variant || 'normal';\n      options.weight = options.weight || 'lighter';\n      options.size = options.size || '12';\n      options.family = options.family || 'Arial';\n      return [options.style, options.variant, options.weight, options.size + 'px', options.family].join(' ');\n    },\n    getAxisRatio: function(min, max, value) {\n      return (value - min) / (max - min);\n    }\n  };\n\n  var BarChart = (function() {\n    function BarChart(ctx, options) {\n      this.mouseListeners = [];\n      this.currentHint = null;\n      this.fillRegions = []\n      this.options = {\n        font: 'Helvetica',\n        fontWeight: 'normal',\n        fontSizeTitle: 24,\n        fontSizeAxes: 20,\n        fontSizeTicks: 18,\n        fontSizeLabels: 18,\n        fontDataTags: 18,\n        fontSizeLegend: 18,\n        fontSizeHint: 18,\n        paddingPercentBars: 0.10,\n        paddingPercentTicks: 0.15,\n        paddingPixelsVertical: 10,\n        paddingPixelsHorizontal: 10,\n        paddingPixelsTicks: 10,\n        maxWidthBars: 0,\n        fillColorBackground: 'rgb(255, 255, 255)',\n        strokeColorBars: 'rgb(0, 0, 0)',\n        fillColorBars: 'rgba(180, 180, 180, 0.25)',\n        scaleStyle: 'linear',\n        barStyle: 'none',\n        stackedBarPadding: 3,\n        defaultMaxTick: 0,\n        pixelsLegendSquare: 10,\n        radiusDot: 5,\n        fillColorLegend: 'rgb(230, 230, 230)',\n        tickFormatter: null,\n        tickFormatterMeasure: null,\n        fillRegion: 'normal'\n      };\n      options = options || { };\n      for (var key in this.options) {\n        if (options.hasOwnProperty(key)) this.options[key] = options[key];\n      }\n      this.ctx = ctx;\n      this.content = { };\n      this.labelPositions = { }\n    }\n\n    BarChart.prototype.update = function(content) {\n      if (typeof content !== 'object') {\n        throw new Error('Collections must be objects.');\n      } else if (!(content.hasOwnProperty('labels') && content.hasOwnProperty('data'))) {\n        throw new Error('Collection must specify labels and data.');\n      } else if (!(Array.isArray(content.labels) && Array.isArray(content.data))) {\n        throw new Error('Labels and data must be arrays.');\n      } else if (content.labels.length !== content.data.length) {\n        throw new Error('Labels and data length must match.');\n      }\n      content._data_standard_deviation = [];\n      content._data_standard_error = [];\n      for (var i = 0; i < content.data.length; ++i) {\n        var isArr = Array.isArray(content.data[i]);\n        if (this.options.scaleStyle === 'log2') {\n          if (isArr) {\n            for (var i3 = 0; i3 < content.data[i].length; ++i3) content.data[i][i3] = Math.log2(content.data[i][i3]);\n          } else content.data[i] = Math.log2(content.data[i]);\n        }\n        if (isArr) {\n          var mean = Helpers.avg(content.data[i]);\n          var acc = 0;\n          for (var i2 = 0; i2 < content.data[i].length; ++i2) acc += Math.pow(mean - content.data[i][i2], 2);\n          acc = Math.sqrt(acc / (content.data[i].length - 1));\n          content._data_standard_deviation.push(acc);\n          content._data_standard_error.push(acc / Math.sqrt(content.data[i].length));\n        } else {\n          content._data_standard_deviation.push(0);\n          content._data_standard_error.push(0);\n        }\n      }\n      this.content = content;\n      this.redraw();\n    };\n\n    BarChart.prototype.redraw = function() {\n      setTimeout(function() {\n        this._draw();\n      }.bind(this), 0);\n    };\n\n    BarChart.prototype.mousemove = function(x, y) {\n      var res = null;\n      for (var index = 0; index < this.mouseListeners.length; ++index) {\n        if ((res = this.mouseListeners[index](x, y))) break;\n      }\n      if (!res || (typeof res) !== 'object' || !res.hasOwnProperty('index') || !res.hasOwnProperty('drawIndex')) {\n        if (this.currentHint !== null) {\n          this.currentHint = null;\n          this.redraw();\n        }\n        return;\n      }\n      var ch = this.currentHint;\n      if (ch == null || ch.index != res.index || ch.drawIndex != res.drawIndex) {\n        this.currentHint = res;\n        this.redraw();\n      }\n    };\n\n    BarChart.prototype._draw = function() {\n      var labelPositions = { }\n      this.mouseListeners = [];\n      this.fillRegions = [];\n\n      var options = this.options;\n      var ctx = this.ctx, content = this.content;\n      var width = ctx.canvas.width, height = ctx.canvas.height;\n      ctx.clearRect(0, 0, width, height);\n      ctx.translate(-0.5, -0.5);\n      var remainingWidth = width, remainingHeight = height;\n      var index;\n\n      if (options.fillColorBackground != null) {\n        ctx.save();\n        ctx.fillStyle = options.fillColorBackground;\n        ctx.fillRect(0, 0, width, height);\n        ctx.restore();\n      }\n\n      var topYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      /* Draw title of bar chart */\n      if (content.title != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTitle, family: options.font });\n        ctx.textAlign = 'center';\n        ctx.fillText(content.title, width / 2, topYPadding + options.fontSizeTitle);\n        ctx.restore();\n        remainingHeight -= options.fontSizeTitle * 1.25;\n        topYPadding += options.fontSizeTitle * 1.25;\n      }\n\n      /* Compute required left padding */\n      var leftXPadding = options.paddingPixelsVertical;\n      remainingWidth  -= options.paddingPixelsVertical;\n\n      var leftXDrawYLabel = null;\n      if (content.yAxis != null) {\n        leftXDrawYLabel = leftXPadding + options.fontSizeAxes * 0.5;\n        remainingWidth -= options.fontSizeAxes * 1.25;\n        leftXPadding += options.fontSizeAxes * 1.25;\n      }\n\n      ctx.save();\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTicks, family: options.font });\n      var maxChartValue, minChartValue;\n      if (options.barStyle === 'stacked') {\n        maxChartValue = 0;\n        minChartValue = Infinity;\n        for (var cmIndex = 0; cmIndex < content.data.length; ++cmIndex) {\n          var doB;\n          if (Array.isArray(doB = content.data[cmIndex])) {\n            var tempSum = 0;\n            for (var ii2 = 0; ii2 < doB.length; ++ii2) tempSum += doB[ii2];\n            maxChartValue = Math.max(maxChartValue, tempSum);\n            minChartValue = Math.min(minChartValue, tempSum);\n          } else {\n            maxChartValue = Math.max(maxChartValue, content.data[cmIndex]);\n            minChartValue = Math.min(minChartValue, content.data[cmIndex]);\n          }\n        }\n      } else {\n        maxChartValue = Helpers.upperMax(content.data);\n        minChartValue = Helpers.lowerMin(content.data);\n      }\n      if (options.scaleStyle.indexOf('adaptive') === 0) {\n        if (options.scaleStyle.indexOf(':') !== -1) {\n          var floater = parseFloat(options.scaleStyle.split(/[:]/)[1]);\n          minChartValue *= floater;\n          maxChartValue *= 1 + (1 - floater) / 2.0;\n        }\n      } else minChartValue = 0;\n      if (options.defaultMaxTick > maxChartValue) maxChartValue = options.defaultMaxTick;\n      if (content.bars != null && Array.isArray(content.bars)) {\n        for (index = 0; index < content.bars.length; ++index) {\n          var cbv = content.bars[index].value;\n          if (isNaN(cbv)) continue;\n          maxChartValue = Math.max(maxChartValue, cbv);\n          minChartValue = Math.min(minChartValue, cbv);\n        }\n      }\n      var maxYAxisTickWidth = options.scaleStyle == 'log2' ? Math.ceil(Math.pow(2, maxChartValue)) : (Math.ceil(maxChartValue) + '.00');\n      if (options.tickFormatterMeasure != null) maxYAxisTickWidth = options.tickFormatterMeasure;\n      maxYAxisTickWidth = ctx.measureText(maxYAxisTickWidth).width;\n      maxYAxisTickWidth = Math.ceil(maxYAxisTickWidth) + options.paddingPixelsTicks;\n      remainingWidth -= maxYAxisTickWidth;\n      leftXPadding += maxYAxisTickWidth;\n      ctx.restore();\n\n      var rightXPadding = options.paddingPixelsVertical;\n      remainingWidth -= options.paddingPixelsVertical;\n\n      /* Draw legend */\n      if (content.legend != null && Array.isArray(content.legend)) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLegend, family: options.font });\n        var maxLWidth = 0;\n        for (var lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          maxLWidth = Math.max(maxLWidth, ctx.measureText(content.legend[lIndex].label).width);\n        }\n        maxLWidth = Math.ceil(maxLWidth);\n        maxLWidth += options.pixelsLegendSquare + 8;\n        var legendEntriesPerLine = Math.floor((remainingWidth - options.paddingPixelsHorizontal * 2) / maxLWidth);\n        var lLReqHeight = Math.ceil(content.legend.length / legendEntriesPerLine) * options.fontSizeLegend * 1.5;\n        remainingHeight -= lLReqHeight;\n        bottomYPadding += lLReqHeight;\n\n        ctx.strokeStyle = 'rgb(0, 0, 0)';\n        ctx.fillStyle = options.fillColorLegend;\n        var bSX, bSY;\n        ctx.beginPath();\n        ctx.moveTo(bSX = leftXPadding, bSY = topYPadding + remainingHeight);\n        ctx.lineTo(bSX + remainingWidth, bSY);\n        ctx.lineTo(bSX + remainingWidth, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY);\n        ctx.stroke();\n        ctx.fill();\n\n        for (lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          var legLine = Math.floor(lIndex / legendEntriesPerLine);\n          var legCol = lIndex % legendEntriesPerLine;\n          ctx.fillStyle = content.legend[lIndex].color;\n          var boxX = bSX + legCol * maxLWidth + 3, boxY = bSY + legLine * options.fontSizeLegend * 1.5 + options.fontSizeLegend * 0.5;\n          ctx.beginPath();\n          ctx.moveTo(boxX, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY);\n          ctx.fill();\n          ctx.stroke();\n\n          ctx.textAlign = 'left';\n          ctx.fillStyle = 'rgb(0, 0, 0)';\n          ctx.fillText(content.legend[lIndex].label, boxX + 3 + options.pixelsLegendSquare, boxY + options.fontSizeLegend * 0.5);\n        }\n\n        ctx.restore();\n      }\n\n      /* Draw x-axis label of bar chart */\n      var bottomYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      if (content.xAxis != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeAxes, family: options.font });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.xAxis, (width - remainingWidth) + remainingWidth / 2, topYPadding + remainingHeight - bottomYPadding);\n        remainingHeight -= options.fontSizeAxes * 1.5;\n        bottomYPadding += options.fontSizeAxes * 1.5;\n        ctx.restore();\n      }\n\n      var widthPerBar = remainingWidth / content.data.length;\n\n      /* Draw x-axis top labels */\n      if (content.topLabels != null) {\n        ctx.save();\n        ctx.textAlign = 'center';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n        remainingHeight -= options.fontSizeLabels * 1.5;\n        topYPadding += options.fontSizeLabels * 1.5;\n        for (index = 0; index < content.topLabels.length; ++index) {\n          ctx.fillText(\n            content.topLabels[index],\n            leftXPadding + index * widthPerBar + widthPerBar / 2,\n            topYPadding - options.fontSizeLabels / 2\n          );\n        }\n        ctx.restore();\n      }\n\n      /* Draw x-axis labels */\n      ctx.save();\n      var reqWidth = 0;\n      if (content.dataTags != null) {\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontDataTags, family: options.font });\n        var dataTags = content.dataTags;\n        for (index = 0; index < dataTags.length; ++index) {\n          if (Array.isArray(dataTags[index])) {\n            for (var index2 = 0; index2 < dataTags[index].length; ++index2) {\n              reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index][index2]).width + 5));\n            }\n          } else {\n            reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index]).width + 5));\n          }\n        }\n      }\n\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n      var computedBarPadding = Math.floor((widthPerBar * options.paddingPercentBars) / 2);\n      var wwh = widthPerBar - computedBarPadding * 2;\n      if (wwh < reqWidth) {\n        computedBarPadding -= Math.ceil((reqWidth - wwh) / 2);\n        computedBarPadding = Math.max(0, computedBarPadding);\n      } else if (options.maxWidthBars > 0 && wwh > options.maxWidthBars) {\n        computedBarPadding = Math.floor((widthPerBar - options.maxWidthBars) / 2);\n      }\n      var maxTextWidth = 0, maxTextStackSize = 1;\n      for (index = 0; index < content.labels.length; ++index) {\n        var tLabel = content.labels[index];\n        if (Array.isArray(tLabel)) {\n          maxTextStackSize = Math.max(maxTextStackSize, tLabel.length);\n          for (index2 = 0; index2 < tLabel.length; ++index2) {\n            maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel[index2]).width);\n          }\n        } else maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel).width);\n      }\n      var xLabelsRotated = false;\n      if (maxTextWidth > widthPerBar - computedBarPadding) {\n        ctx.textAlign = 'right';\n        ctx.rotate(Math.PI * 1.5);\n        xLabelsRotated = true;\n      } else {\n        ctx.textAlign = 'center';\n      }\n      var lastLabelY = -options.fontSizeLabels;\n      for (index = 0; index < content.labels.length; ++index) {\n        var cLabel = content.labels[index];\n        var x = leftXPadding + index * widthPerBar + widthPerBar / 2, y = topYPadding + remainingHeight - options.fontSizeLabels / 2;\n        if (xLabelsRotated) {\n          y = topYPadding + remainingHeight - maxTextWidth + 5;\n          y = [x, x = -y][0];\n\n          if (y < lastLabelY + options.fontSizeLabels) continue;\n          lastLabelY = y;\n        }\n        var yUp = options.fontSizeLabels * (maxTextStackSize - 1);\n        if (Array.isArray(cLabel)) {\n          if (xLabelsRotated) {\n            yUp = options.fontSizeLabels * (cLabel.length - 1.5);\n            yUp /= 2;\n          }\n          for (index2 = 0; index2 < cLabel.length; ++index2) {\n            ctx.fillText(cLabel[index2], x, y - yUp);\n            yUp -= options.fontSizeLabels;\n          }\n        } else {\n          if (xLabelsRotated) yUp = -options.fontSizeLabels * 0.25;\n          ctx.fillText(cLabel, x, y - yUp);\n        }\n      }\n      if (xLabelsRotated) {\n        remainingHeight -= maxTextWidth + 5;\n        bottomYPadding += maxTextWidth + 5;\n      } else {\n        var remVal = options.fontSizeLabels * maxTextStackSize;\n        remVal += options.fontSizeLabels * 0.5;\n        remainingHeight -= remVal;\n        bottomYPadding += remVal;\n      }\n      ctx.restore();\n\n      /* Draw boundaries */\n      var boundX1 = leftXPadding, boundX2 = leftXPadding + remainingWidth;\n      var boundY1 = topYPadding, boundY2 = topYPadding + remainingHeight;\n\n      for (index = 0; index < content.labels.length; ++index) labelPositions[index] = {\n        xStart: leftXPadding + index * widthPerBar,\n        xEnd: leftXPadding + (1 + index) * widthPerBar,\n        yStart: boundY1, yEnd: boundY2\n      }\n\n      ctx.save();\n      ctx.strokeStyle = 'rgb(0, 0, 0)';\n      ctx.beginPath();\n      if (content.topLabels != null) {\n        ctx.moveTo(boundX2, boundY1);\n        ctx.lineTo(boundX1, boundY1);\n      } else {\n        ctx.moveTo(boundX1, boundY1);\n      }\n      ctx.lineTo(boundX1, boundY2);\n      ctx.lineTo(boundX2, boundY2);\n      if (content.topLabels != null) ctx.lineTo(leftXPadding + remainingWidth, topYPadding);\n      ctx.stroke();\n      ctx.restore();\n\n      /* Draw top label */\n      if (content.topLabel != null) {\n        ctx.save();\n        ctx.textAlign = 'right';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n        ctx.fillText(content.topLabel, leftXPadding - 3, topYPadding - options.fontSizeLabels / 2);\n        ctx.restore();\n      }\n\n      /* Draw y-axis label of bar chart */\n      if (content.yAxis != null) {\n        ctx.save();\n        ctx.rotate(Math.PI * 1.5);\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeAxes, family: options.font });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.yAxis, -(topYPadding + remainingHeight / 2), leftXDrawYLabel);\n        ctx.restore();\n      }\n\n      /* Draw y-axis labels */\n      ctx.save();\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.20)';\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTicks, family: options.font });\n      ctx.textAlign = 'right';\n      var tickMeta = Helpers.getLinearTicks(0, maxChartValue, Math.max(2, remainingHeight / (options.fontSizeTicks * (1 + options.paddingPercentTicks))));\n      var alpha = maxChartValue / options.fontSizeTicks;\n      maxChartValue = tickMeta[1];\n      if (maxChartValue > 1) maxChartValue += Math.ceil(alpha);\n      else maxChartValue += alpha;\n      var ticks = [];\n      while (tickMeta[0] <= tickMeta[1]) {\n        ticks.push(tickMeta[0]);\n        tickMeta[0] += tickMeta[2];\n      }\n      for (index = 0; index < ticks.length; ++index) {\n        var tickHeight = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, ticks[index]));\n        if (tickHeight < 0) continue;\n        if (options.scaleStyle == 'log2' && ticks[index] !== 0) ticks[index] = Math.round(Math.pow(2, ticks[index]));\n        else ticks[index] = Math.floor(ticks[index] * 100) / 100;\n        if (options.tickFormatter != null && typeof options.tickFormatter === 'function') {\n          ctx.fillText(options.tickFormatter(ticks[index]).toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        } else {\n          ctx.fillText(ticks[index].toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        }\n        if (index == 0) continue;\n        ctx.beginPath();\n        ctx.moveTo(leftXPadding, topYPadding + remainingHeight - tickHeight);\n        ctx.lineTo(leftXPadding + remainingWidth, topYPadding + remainingHeight - tickHeight);\n        ctx.stroke();\n      }\n      ctx.restore();\n\n      if (content.bars != null && Array.isArray(content.bars)) {\n        ctx.save();\n        for (index = 0; index < content.bars.length; ++index) {\n          var cBar = content.bars[index];\n          if (cBar.value > maxChartValue) continue;\n          var renderBarY = topYPadding + remainingHeight - Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, cBar.value));\n          ctx.strokeStyle = cBar.style;\n          ctx.fillStyle = cBar.style;\n          ctx.beginPath();\n          ctx.moveTo(boundX1, renderBarY);\n          ctx.lineTo(boundX2, renderBarY);\n          ctx.stroke();\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n\n      /* Draw bars */\n      ctx.save();\n      var lastData = null;\n      for (index = 0; index < content.data.length; ++index) {\n        var fillColorForIndex = null;\n        var strokeColorForIndex = null;\n        if (content.fillColor != null) {\n          if (Array.isArray(content.fillColor)) fillColorForIndex = ctx.fillStyle = content.fillColor[index];\n          else ctx.fillStyle = content.fillColor;\n        } else ctx.fillStyle = options.fillColorBars;\n        if (content.strokeColor != null) {\n          if (Array.isArray(content.strokeColor)) strokeColorForIndex = ctx.strokeStyle = content.strokeColor[index];\n          else ctx.strokeStyle = content.strokeColor;\n        } else ctx.strokeStyle = options.strokeColorBars;\n        var v = content.data[index];\n        var vIsArr = Array.isArray(v);\n        var renderStartX = leftXPadding + widthPerBar * index;\n        if (vIsArr && options.barStyle === 'stacked') {\n          var runningValue = 0, lastHeight = 0;\n          for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n            if (fillColorForIndex != null && Array.isArray(fillColorForIndex)) {\n              ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n            }\n            if (strokeColorForIndex != null && Array.isArray(strokeColorForIndex)) {\n              ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n            }\n\n            runningValue += v[drawIndex];\n            var renderBarHeight = Math.floor(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, runningValue));\n            var renderUpToY = topYPadding + remainingHeight - renderBarHeight;\n            if (Math.abs(renderBarHeight - lastHeight) < options.stackedBarPadding + 2) {\n              lastHeight = renderBarHeight;\n              continue;\n            }\n\n            var barPadP = drawIndex > 0 ? options.stackedBarPadding : 0;\n            var tSX, tSY;\n            var tEX, tEY;\n            ctx.beginPath();\n            ctx.moveTo(tSX = renderStartX + computedBarPadding, tSY = topYPadding + remainingHeight - lastHeight - barPadP);\n            ctx.lineTo(renderStartX + computedBarPadding, renderUpToY);\n            ctx.lineTo(tEX = renderStartX + (widthPerBar - 1) - computedBarPadding, tEY = renderUpToY);\n            ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight - lastHeight - barPadP);\n            if (drawIndex > 0) ctx.lineTo(tSX, tSY);\n            ctx.stroke();\n            ctx.fill();\n            var hint;\n            if (content.hints != null && content.hints[index] != null && (hint = content.hints[index][drawIndex]) != null) {\n              this.mouseListeners.push(function(index, drawIndex, hint, sx, sy, ex, ey, x, y) {\n                var minX = Math.min(sx, ex), maxX = Math.max(sx, ex);\n                var minY = Math.min(sy, ey), maxY = Math.max(sy, ey);\n                if (x < minX || x > maxX || y < minY || y > maxY) return null;\n                return { index: index, drawIndex: drawIndex, rect: { left: minX, right: maxX, top: minY, bottom: maxY }, text: hint.split('\\n') };\n              }.bind(this, index, drawIndex, hint, tSX, tSY, tEX, tEY));\n            }\n\n            var tagText;\n            if (tSY - renderUpToY > options.fontDataTags * 1.25 && content.dataTags != null && (tagText = content.dataTags[index]) != null && (tagText = tagText[drawIndex]) != null) {\n              var oFS = ctx.fillStyle;\n              ctx.fillStyle = 'rgb(0, 0, 0)';\n              ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontDataTags, family: options.font });\n              ctx.textAlign = 'center';\n              ctx.fillText(tagText, renderStartX + widthPerBar / 2, tSY - options.fontDataTags * 0.25);\n              ctx.fillStyle = oFS;\n            }\n\n            lastHeight = renderBarHeight;\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY - 3);\n          }\n        } else if (options.barStyle === 'line') {\n          if (vIsArr) {\n            var rbx = renderStartX + widthPerBar / 2;\n\n            var lDu;\n            if (options.fillRegion === 'background') {\n              lDu = lastData;\n              if (Array.isArray(lDu)) lDu = lDu[0];\n              if (lDu != null) {\n                var sFS = ctx.fillStyle\n                ctx.fillStyle = lDu.color\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1)\n                ctx.fillStyle = sFS\n              }\n            }\n\n            var nLData = [];\n            for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n              var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v[drawIndex]));\n              var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n\n              var rby = renderUpToY3;\n              if (lastData != null) {\n                var tLX, tLY;\n                if (Array.isArray(lastData)) {\n                  tLX = (lastData[drawIndex] || { }).x;\n                  tLY = (lastData[drawIndex] || { }).y;\n                } else {\n                  tLX = lastData.x;\n                  tLY = lastData.y;\n                }\n\n                if (tLX && tLY) {\n                  if (Array.isArray(strokeColorForIndex)) {\n                    ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n                  } else ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n\n              if (Array.isArray(fillColorForIndex)) {\n                ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n              }\n              if (Array.isArray(strokeColorForIndex)) {\n                ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n              }\n\n              ctx.beginPath();\n              ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n              ctx.stroke();\n              ctx.fill();\n\n              nLData[drawIndex] = { x: rbx, y: rby, color: ctx.fillStyle };\n            }\n            lastData = nLData;\n            if (lDu != null && lDu.color != lastData[0].color) this.fillRegions.push({\n              x: lastData[0].x,\n              y: lastData[0].y,\n              prev: lDu.color,\n              next: lastData[0].color\n            })\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index]\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - (remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value)), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          } else {\n            var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n            var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n\n            var rbx = renderStartX + widthPerBar / 2, rby = renderUpToY3;\n            var lDu;\n            if (options.fillRegion === 'background') {\n              if (lastData != null) {\n                lDu = lastData;\n                if (Array.isArray(lDu)) lDu = lDu[0];\n                var sFS = ctx.fillStyle\n                ctx.fillStyle = lDu.color\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1)\n                ctx.fillStyle = sFS\n              }\n            }\n            ctx.beginPath();\n            ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n            ctx.stroke();\n            ctx.fill();\n\n            if (lastData != null) {\n              if (Array.isArray(lastData)) {\n                var tLX, tLY;\n                for (var key in lastData) {\n                  if (!lastData.hasOwnProperty(key)) continue;\n                  tLX = lastData[key].x;\n                  tLY = lastData[key].y;\n                  if (tLX && tLY) {\n                    ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                    ctx.beginPath();\n                    ctx.moveTo(tLX, tLY);\n                    ctx.lineTo(rbx, rby);\n                    ctx.stroke();\n                  }\n                }\n              } else {\n                var tLX = lastData.x, tLY = lastData.y;\n                if (tLX && tLY) {\n                  ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n            }\n\n            lastData = { x: rbx, y: rby, color: ctx.fillStyle };\n            if (lDu != null && lDu.color != lastData.color) this.fillRegions.push({\n              x: lastData.x,\n              y: lastData.y,\n              prev: lDu.color,\n              next: lastData.color\n            })\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index]\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - (remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value)), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          }\n\n          var hint;\n          if (content.hints != null && (hint = content.hints[index]) != null) {\n            this.mouseListeners.push(function(index, hint, sx, sy, ex, ey, x, y) {\n              var minX = Math.min(sx, ex), maxX = Math.max(sx, ex);\n              var minY = Math.min(sy, ey), maxY = Math.max(sy, ey);\n              if (x < minX || x > maxX || y < minY || y > maxY) return null;\n              return { index: index, drawIndex: drawIndex, rect: { left: minX, right: maxX, top: minY, bottom: maxY }, text: hint.split('\\n') };\n            }.bind(this, index, hint, rbx - 1, topYPadding, rbx + 1, topYPadding + remainingHeight));\n          }\n        } else {\n          if (vIsArr) v = Helpers.avg(v);\n          var renderBarHeight2 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n          var renderUpToY2 = topYPadding + remainingHeight - renderBarHeight2;\n          ctx.beginPath();\n          ctx.moveTo(renderStartX + computedBarPadding, topYPadding + remainingHeight);\n          ctx.lineTo(renderStartX + computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight);\n          ctx.stroke();\n          ctx.fill();\n\n          if (options.barStyle === 'error') {\n            var val;\n            if ((val = content._data_standard_error[index]) != 0) {\n              var renderBarError = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, val));\n              ctx.beginPath();\n              var wiskerWidth = Math.round((widthPerBar - computedBarPadding * 2) / 8);\n              var x_ = leftXPadding + widthPerBar * index + widthPerBar / 2;\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.moveTo(x_, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_, renderUpToY2 - renderBarError);\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.stroke();\n            }\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY2 - 3);\n          }\n        }\n      }\n      ctx.restore();\n\n      if (this.currentHint != null) {\n        ctx.save();\n        var hRect = this.currentHint.rect, hints = this.currentHint.text;\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeHint, family: options.font });\n        ctx.textAlign = 'left';\n        var boxWidth = 0;\n        for (index = 0; index < hints.length; ++index) {\n          boxWidth = Math.max(boxWidth, Math.ceil(ctx.measureText(hints[index]).width));\n        }\n        var boxWidthPadding = 5;\n        var lineHeight = options.fontSizeHint * 1.5;\n        var boxHeight = hints.length * lineHeight;\n        var drawX = hRect.right + 10, drawY = (hRect.top + hRect.bottom) / 2;\n        boxWidth += boxWidthPadding * 2;\n        if (drawX + boxWidth > width) {\n          drawX = hRect.left - boxWidth - 10;\n        }\n        if (drawY - boxHeight / 2 < 0) {\n          drawY = Math.ceil(boxHeight / 2) + 1;\n        } else if (drawY + boxHeight / 2 > height) {\n          drawY = height - boxHeight / 2 - 1;\n        }\n        ctx.clearRect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.beginPath();\n        ctx.rect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.stroke();\n        for (index = 0; index < hints.length; ++index) {\n          ctx.fillText(hints[index], drawX + boxWidthPadding, drawY - boxHeight / 2 + options.fontSizeHint + index * lineHeight);\n        }\n        ctx.restore();\n      }\n\n      ctx.translate(0.5, 0.5);\n\n      this.labelPositions = labelPositions;\n    };\n\n    return BarChart;\n  })();\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = BarChart;\n  } else {\n    window.BarChart = BarChart;\n  }\n})();\n"]},"metadata":{},"sourceType":"script"}